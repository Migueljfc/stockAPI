# Define a 'Persistent Volume Claim' (PVC) for MariaDB Storage, dynamically provisioned by cluster

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-pv-claim # name of PVC essential for identifying the storage data
spec:
  accessModes:
    - ReadWriteOnce   # This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 500Mi    # This will tell Kubernetes about the amount of space we are trying to claim.

---
# Configure 'Deployment' of MariaDB server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stockdb-deployment
spec:
  selector: # MariaDB Pod should contain the same labels
    matchLabels:
      app: stockdb
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: stockdb
    spec:
      containers:
      - name: stockdb
        image: mariadb:10.8.2
        imagePullPolicy: Always
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stockdb-secrets
              key: rootpassword
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: stockdb-secrets
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stockdb-secrets
              key: password
        - name: MYSQL_DATABASE 
          valueFrom: 
            secretKeyRef: 
              name: stockdb-secrets 
              key: dbname
          
        volumeMounts:
        - name: mariadb-persistent-storage
          mountPath: /var/lib/mysql
        - name : init-script
          mountPath: /docker-entrypoint-initdb.d
  
      volumes:
      - name: mariadb-persistent-storage # Obtaining 'volume' from PVC
        persistentVolumeClaim:
          claimName: mariadb-pv-claim
      - name: init-script
        configMap:
          name: mariadb-init-map
  
          

---
# Define a 'Service' to expose MySQL to other services
apiVersion: v1
kind: Service
metadata:
  name: stockdb-service # DNS name
  #namespace: egs-ressellr
  labels:
    app: stockdb
spec:
  type: NodePort
  ports:
  - port: 3306
    targetPort: 3306
    nodePort: 31000 
  selector: # MySQL Pod should contain the same labels
    app: stockdb
  
